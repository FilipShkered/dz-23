class TodoApi{static API="https://642ffaafc26d69edc88806d4.mockapi.io/api/todo";static getList(){return fetch(TodoApi.API).then(t=>{if(t.ok)return t.json();throw new Error("Can not retrive todo list from server")})}static create(t){return fetch(TodoApi.API,{method:"POST",body:JSON.stringify(t),headers:{"Content-type":"application/json"}}).then(t=>{if(t.ok)return t.json();throw new Error("Can not create todo on server")})}static delete(t){return fetch(TodoApi.API+"/"+t,{method:"DELETE"}).then(t=>{if(t.ok)return t.json();throw new Error("Can not delete todo from server")})}static update(t,o){return fetch(TodoApi.API+"/"+t,{method:"PUT",body:JSON.stringify(o),headers:{"Content-type":"application/json"}}).then(t=>{if(t.ok)return t.json();throw new Error("Failed to update todo item on server")})}}class Collection{static DEFAULT_TODO={done:!1};#todoList=[];fetch(){return TodoApi.getList().then(t=>{this.#todoList=t})}create(t){return TodoApi.create({...Collection.DEFAULT_TODO,...t}).then(t=>(this.addListItem(t),t))}update(o,t){return TodoApi.update(o,t).then(t=>(this.editListItem(o,t),t))}delete(t){return this.deleteListItem(t),TodoApi.delete(t),Promise.resolve()}getList(){return this.#todoList}deleteListItem(o){this.#todoList=this.#todoList.filter(t=>t.id!==o)}editListItem(o,i){this.#todoList=this.#todoList.map(t=>t.id===o?i:t)}addListItem(t){this.#todoList.push(t)}find(o){return this.#todoList.find(t=>t.id===o)}}class TodoFormView{constructor(t){this.$form=this.init(),this.$inputs=this.$form.find("input"),this.options=t}init(){return $(`<form id="todoForm">
        <input id="id" type="hidden">
        <input class="input" id="message" type="text" placeholder="Что нужно сделать?" />
        <button class="msgButton" id="msgButton">Отправить</button>
    </form>`).on("submit",this.onFormSubmit.bind(this))}onFormSubmit(t){t.preventDefault();t=this.getData();this.isTodoValid(t)?this.options.onSubmit(t):this.showError(new Error("Поле не может быть пустым"))}isTodoValid(t){return""!==t.message}appendTo(t){t.append(this.$form)}getData(){var t={};for(const o of this.$inputs)t[o.id]=o.value;return t}setData(t){for(const o of this.$inputs)o.value=t[o.id],console.log(t)}clearData(){for(const t of this.$inputs)t.value=""}showError(t){alert(t.message)}}class TodoListView{static CLASS_DONE=".done";static TODO_ITEM=".todoItem";static DELETE_BTN=".deleteBtn";static EDIT_BTN=".editBtn";constructor(t){this.$listEl=this.init(),this.options=t}init(){return $('<div class="todo"><ul id="todoList"></ul></div>').on("click",TodoListView.DELETE_BTN,this.onDelBtnClick.bind(this)).on("click",TodoListView.EDIT_BTN,this.onEditBtnClick.bind(this)).on("click",TodoListView.TODO_ITEM,this.onTodoItemClick.bind(this))}onDelBtnClick(t){t.stopPropagation();t=this.getTodoElId(t.target);this.options.onDelete(t)}onEditBtnClick(t){t.stopPropagation();t=this.getTodoElId(t.target);this.options.onEdit(t)}onTodoItemClick(t){t=this.getTodoElId(t.target);this.options.onToggle(t),console.log(t)}getTodoElId(t){return t.closest(TodoListView.TODO_ITEM).dataset.id}appendTo(t){t.append(this.$listEl)}renderTodoList(t){t=t.map(this.genTodoHtml).join("");this.$listEl.html(t)}replaceTodo(t,o){t=this.$listEl.find(`[data-id="${t}"]`),o=this.genTodoHtml(o);t.replaceWith(o)}writeTodo(t){t=this.genTodoHtml(t);this.$listEl.append(t)}genTodoHtml(t){return`
            <li
                class="todoItem${t.done?" done":""}"
                data-id="${t.id}"
            >
                <span>${t.message}</span>
                <button class="editBtn">Edit</button>
                <button class="deleteBtn">Delete</button>
            </li>`}removeTodo(t){this.$listEl.find(`[data-id="${t}"]`).remove()}}class Controller{constructor(t){this.todoCollection=new Collection,this.todoFormView=new TodoFormView({onSubmit:this.save.bind(this)}),this.todoListView=new TodoListView({onDelete:this.delTodoElem.bind(this),onEdit:t=>{t=this.todoCollection.find(t);this.todoFormView.setData(t)},onToggle:this.todoDone.bind(this)}),this.todoFormView.appendTo(t),this.todoListView.appendTo(t),this.todoCollection.fetch().then(()=>{this.todoListView.renderTodoList(this.todoCollection.getList())})}save(o){o.id?this.todoCollection.update(o.id,o).then(t=>{this.todoListView.replaceTodo(o.id,t),this.todoFormView.clearData()}).catch(t=>showError(t)):this.todoCollection.create(o).then(t=>{this.todoListView.writeTodo(t),this.todoFormView.clearData()}).catch(t=>{showError(t)})}delTodoElem(t){this.todoCollection.delete(t).catch(t=>showError(t)),this.todoListView.removeTodo(t)}todoDone(t){var o=this.todoCollection.find(t);o?(o.done=!o.done,this.todoCollection.update(t,o).catch(t=>this.showError(t)),this.todoListView.replaceTodo(t,o)):console.error(`Todo item with ID ${t} not found.`)}showError(t){alert(t.message)}}const $rootEl=$("#root"),controller=new Controller($rootEl);
//# sourceMappingURL=app.js.map
